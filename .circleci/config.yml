version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
          workflow_id:
            type: string 
          when:
            type: string        
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/6dNGfvda7Z12sdybbK89sn/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
  initial-stack:
    docker:
       - image: amazon/aws-cli
    steps:
       - checkout
       - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
       - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation deploy \
               --template-file .circleci/files/cloudfront.yml \
               --tags project=udapeople \
               --stack-name "InitialStack-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> .circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail      
  configure-infrastructure:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["64:32:6a:a0:da:bd:13:40:cc:75:4a:e7:d6:3e:76:8a"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
      - run:
          name: Configure server with Ansible
          command: |
            cd .circleci/ansible
            cat inventory.txt 
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail          
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt   
      - run:
          name: Send migration results to kvdb.io
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/6dNGfvda7Z12sdybbK89sn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              curl --insecure https://kvdb.io/6dNGfvda7Z12sdybbK89sn/migration_${CIRCLE_WORKFLOW_ID:0:7}  
              echo "test"
            fi
              curl -k https://kvdb.io/6dNGfvda7Z12sdybbK89sn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              curl --insecure https://kvdb.io/6dNGfvda7Z12sdybbK89sn/migration_${CIRCLE_WORKFLOW_ID:0:7}  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            yum install -y python3 python3-pip
            # script to install Node.js onto Fedora based systems
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
               BACKEND_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
               echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
               cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  deploy-backend:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["64:32:6a:a0:da:bd:13:40:cc:75:4a:e7:d6:3e:76:8a"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install nodejs npm
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy backend
          command: |
           cd backend
           npm i
           npm run build
           cd ..
           tar -C backend -czvf artifact.tar.gz .
           cd .circleci/ansible
           echo "Contents  of the inventory.txt file is -------"
           cat inventory.txt
           ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  
  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
           BACKEND_IP=$(aws ec2 describe-instances \
           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --output text)
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            if curl "${API_URL}/api/status" | grep "ok"
            then
             return 0
            else
             return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
               return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            yum install -y python3 python3-pip
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs                   
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                   --no-paginate --output text)
            echo OldWorkflowID : "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            curl -k https://kvdb.io/6dNGfvda7Z12sdybbK89sn/oldid_${CIRCLE_WORKFLOW_ID:0:7} -d "${OldWorkflowID}"
            aws cloudformation deploy \
               --template-file .circleci/files/cloudfront.yml \
               --tags project=udapeople \
               --stack-name "InitialStack-${OldWorkflowID}" \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail         
  cleanup: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Fetch the Old workflow ID
          command: |
           export OldWorkflowID=$(curl --insecure https://kvdb.io/6dNGfvda7Z12sdybbK89sn/oldid_${CIRCLE_WORKFLOW_ID:0:7})            
           echo OldWorkflowID : "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
             echo '----------------Delete Confirmed----------------'
             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
             echo '------------cannot cleanup----------------'
            fi 
           
                      

workflows:
  default:
    jobs:
      - initial-stack
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]        
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]   
      - cloudfront-update:
          requires: [smoke-test] 
      - cleanup:
          requires: [cloudfront-update]        